{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7d322282",
   "metadata": {},
   "outputs": [],
   "source": [
    "import boto3 \n",
    "bedrock_runtime = boto3.client(\n",
    "    service_name=\"bedrock-runtime\",\n",
    "    region_name=\"us-east-1\",\n",
    ")\n",
    "\n",
    "import boto3 \n",
    "bedrock = boto3.client(\n",
    "    service_name='bedrock', \n",
    "    region_name='us-east-1'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4adab886",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import os\n",
    "import sys"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a70f6658",
   "metadata": {},
   "source": [
    "# Kinesis Transcription Retrieval"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ae5d75df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting tzlocal\n",
      "  Downloading tzlocal-5.2-py3-none-any.whl.metadata (7.8 kB)\n",
      "Downloading tzlocal-5.2-py3-none-any.whl (17 kB)\n",
      "Installing collected packages: tzlocal\n",
      "Successfully installed tzlocal-5.2\n"
     ]
    }
   ],
   "source": [
    "!pip install tzlocal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "474d3b2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# !pip install tzlocal\n",
    "# pip install python-dateutil\n",
    "# pip install boto3\n",
    "import boto3\n",
    "import base64\n",
    "import json\n",
    "import time\n",
    "import tzlocal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ff9d22a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize a boto3 Kinesis client\n",
    "kinesis_client = boto3.client('kinesis', region_name='us-east-1')\n",
    "\n",
    "# The name of your Kinesis stream\n",
    "stream_name = 'CH_agent_call_streams'\n",
    "\n",
    "# The sequence number you want to start reading from\n",
    "sequence_number_for_shard = '49649059939264757358942140911703275325366952989042933794'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ed6ed023",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to process records and create JSON\n",
    "def process_records(records):\n",
    "    for record in records:\n",
    "        # Kinesis data is UTF-8 encoded so decode here\n",
    "        payload = record[\"Data\"].decode('utf-8')\n",
    "        return payload\n",
    "\n",
    "# Function to get records from Kinesis\n",
    "def get_kinesis_records(stream_name, sequence_number_for_shard):\n",
    "    response = kinesis_client.describe_stream(StreamName=stream_name)\n",
    "    shard_id = response['StreamDescription']['Shards'][2]['ShardId']\n",
    "\n",
    "    # Get a shard iterator using the sequence number\n",
    "    shard_iterator = kinesis_client.get_shard_iterator(StreamName=stream_name,\n",
    "                                                       ShardId=shard_id,\n",
    "                                                       ShardIteratorType='AT_SEQUENCE_NUMBER',\n",
    "                                                       StartingSequenceNumber=sequence_number_for_shard)['ShardIterator']\n",
    "\n",
    "    out = kinesis_client.get_records(ShardIterator=shard_iterator, Limit=100)\n",
    "    shard_iterator = out['NextShardIterator']\n",
    "    records = out['Records']\n",
    "\n",
    "    if records:\n",
    "        json_data = process_records(records)\n",
    "\n",
    "    time.sleep(1)  # Sleep to avoid hitting rate limits\n",
    "    return json_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "da4ba8b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "response = get_kinesis_records(stream_name, sequence_number_for_shard)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e004420c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\n",
      "  {\n",
      "    Transcript: {\n",
      "      ParticipantId: 'AGENT',\n",
      "      ParticipantRole: 'AGENT',\n",
      "      Content: 'Good morning! Thank you for calling Patient Pathways. My name is Alex, and I'll be assisting you with your enrollment. How may I address you?',\n",
      "      BeginOffsetMillis: 1257,\n",
      "      EndOffsetMillis: 9697,\n",
      "      Sentiment: 'NEUTRAL',\n",
      "      Id: 'fb29489e-d06b-48b1-8e0b-519f17c4a68e'\n",
      "    }\n",
      "  },\n",
      "  {\n",
      "    Transcript: {\n",
      "      ParticipantId: 'CUSTOMER',\n",
      "      ParticipantRole: 'CUSTOMER',\n",
      "      Content: 'Hello, Alex. I'm Jordan Smith',\n",
      "      BeginOffsetMillis: 3047,\n",
      "      EndOffsetMillis: 8055,\n",
      "      Sentiment: 'POSITIVE',\n",
      "      Id: '7f6820ee-0487-4cbc-9b35-33e7c31e1d5d'\n",
      "    }\n",
      "  },\n",
      "  {\n",
      "    Transcript: {\n",
      "      ParticipantId: 'AGENT',\n",
      "      ParticipantRole: 'AGENT',\n",
      "      Content: ' It's nice to meet you, Jordan. To start with your enrollment, I'll need to ask you a few questions. Is now a good time?',\n",
      "      BeginOffsetMillis: 10457,\n",
      "      EndOffsetMillis: 16775,\n",
      "      Sentiment: 'POSITIVE',\n",
      "      Id: '43d73132-0645-4133-8488-26aa9eac95bc'\n",
      "    }\n",
      "  },\n",
      "\n",
      "  {\n",
      "    Transcript: {\n",
      "      ParticipantId: 'CUSTOMER',\n",
      "      ParticipantRole: 'CUSTOMER',\n",
      "      Content: 'Yes, that's fine',\n",
      "      BeginOffsetMillis: 10457,\n",
      "      EndOffsetMillis: 16775,\n",
      "      Sentiment: 'POSITIVE',\n",
      "      Id: '43d73132-0645-4133-8488-26aa9eac95bc'\n",
      "    }\n",
      "  },\n",
      "  {\n",
      "    Transcript: {\n",
      "      ParticipantId: 'AGENT',\n",
      "      ParticipantRole: 'AGENT',\n",
      "      Content: \"Great, thank you\",\n",
      "      BeginOffsetMillis: 17207,\n",
      "      EndOffsetMillis: 21155,\n",
      "      Sentiment: 'NEGATIVE',\n",
      "      Id: '87b9d041-dadb-435f-a92b-6588bf150eea'\n",
      "    }\n",
      "  },\n",
      "  {\n",
      "    Transcript: {\n",
      "      ParticipantId: 'AGENT',\n",
      "      ParticipantRole: 'AGENT',\n",
      "      Content: \"Let's begin with your full name for our records\",\n",
      "      BeginOffsetMillis: 21180,\n",
      "      EndOffsetMillis: 22005,\n",
      "      Sentiment: 'POSITIVE',\n",
      "      Id: 'b8e2cca3-4cec-4a86-a20f-86fc0dc00101'\n",
      "    }\n",
      "  },\n",
      "  {\n",
      "    Transcript: {\n",
      "      ParticipantId: 'CUSTOMER',\n",
      "      ParticipantRole: 'CUSTOMER',\n",
      "      Content: 'It's Jordan Andrew Smith',\n",
      "      BeginOffsetMillis: 21307,\n",
      "      EndOffsetMillis: 21865,\n",
      "      Sentiment: 'NEUTRAL',\n",
      "      Id: '7d7cac42-9491-4c0e-bd34-f93764495e6d'\n",
      "    }\n",
      "  },\n",
      "  {\n",
      "    Transcript: {\n",
      "      ParticipantId: 'AGENT',\n",
      "      ParticipantRole: 'AGENT',\n",
      "      Content: 'Thank you, Jordan. May I ask which gender you identify with? This information helps us to tailor our care to your specific needs, but please know that providing this information is entirely optional',\n",
      "      BeginOffsetMillis: 23097,\n",
      "      EndOffsetMillis: 23895,\n",
      "      Sentiment: 'NEUTRAL',\n",
      "      Id: '497687d0-1cca-42c0-ae85-4c07d18b369d'\n",
      "    }\n",
      "  },\n",
      "  {\n",
      "    Transcript: {\n",
      "      ParticipantId: 'CUSTOMER',\n",
      "      ParticipantRole: 'CUSTOMER',\n",
      "      Content: \"Sure, it's March 14, 1989\",\n",
      "      BeginOffsetMillis: 25320,\n",
      "      EndOffsetMillis: 29805,\n",
      "      Sentiment: 'NEUTRAL',\n",
      "      Id: '36f02c1c-7fae-4e91-b72b-bae54d02e094'\n",
      "    }\n",
      "  },\n",
      "  {\n",
      "    Transcript: {\n",
      "      ParticipantId: 'AGENT',\n",
      "      ParticipantRole: 'AGENT',\n",
      "      Content: 'Perfect, thank you. Next, I'll need your contact information. What's the best phone number and email to reach you at?',\n",
      "      BeginOffsetMillis: 29050,\n",
      "      EndOffsetMillis: 33065,\n",
      "      Sentiment: 'NEUTRAL',\n",
      "      Id: '2b9c0d6c-8b42-42c7-9793-e7a9920290d4'\n",
      "    }\n",
      "  },\n",
      " {\n",
      "    Transcript: {\n",
      "      ParticipantId: 'CUSTOMER',\n",
      "      ParticipantRole: 'CUSTOMER',\n",
      "      Content: 'You can reach me at 555-123-4567 and jordan.smith@email.com',\n",
      "      BeginOffsetMillis: 38330,\n",
      "      EndOffsetMillis: 41625,\n",
      "      Sentiment: 'NEUTRAL',\n",
      "      Id: '08b277e9-dc2a-4286-b85f-6c93aba55461'\n",
      "    }\n",
      "  }\n",
      "]\n"
     ]
    }
   ],
   "source": [
    "print(response)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64d78987",
   "metadata": {},
   "source": [
    "# Text Preprocessing :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "a44b35b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "\n",
    "def preprocess_text(text):\n",
    "    r1 = text.replace(\"[\",\"\").replace(\"]\",\"\").replace('Transcript','\"Transcript\"')\n",
    "    r2 = r1.replace('ParticipantId','\"ParticipantId\"').replace('ParticipantRole','\"ParticipantRole\"').replace('Content','\"Content\"')\n",
    "    r3 = r2.replace('BeginOffsetMillis','\"BeginOffsetMillis\"').replace('EndOffsetMillis','\"EndOffsetMillis\"')\n",
    "    r4 = r3.replace('Sentiment','\"Sentiment\"').replace('Id','\"Id\"')\n",
    "    \n",
    "    start_word_indices = [i.start() for i in re.finditer('\"ParticipantRole\"',r4)]\n",
    "    end_word_indices = [i.start() for i in re.finditer('\"BeginOffsetMillis\"',r4)]\n",
    "    \n",
    "    start_search_word = '\"Participant_Role\"'\n",
    "    transcript = \"\"\n",
    "    for i in range(len(start_word_indices)):\n",
    "        transcript = transcript + word_filter(r4,start_search_word,start_word_indices[i],end_word_indices[i]) + \"\\n\"\n",
    "        \n",
    "    return transcript\n",
    "\n",
    "def word_filter(text,start_search_word,start_word_index,end_word_index):\n",
    "    # Check if the search word exists in the input string\n",
    "    if start_word_index != -1:\n",
    "        # Extract everything from the search word onwards\n",
    "        extracted_text = text[start_word_index + len(start_search_word):end_word_index]\n",
    "        roles = [\"AGENT\",\"CUSTOMER\"]\n",
    "        role_index = 0\n",
    "        conv = \"\"\n",
    "        for role in roles:\n",
    "            if extracted_text.find(role) != -1 :\n",
    "                role_index = extracted_text.find(role)\n",
    "                content_index = extracted_text.find('\"Content\"')\n",
    "                comma_indices = [i.start() for i in re.finditer(',',extracted_text)] \n",
    "                #temp = extracted_text[content_index+len('\"Content\"'):end_word_index]\n",
    "                #comma_index = temp[content_index+len('Content'):].find(\",\")\n",
    "                conv = conv + extracted_text[role_index:role_index+len(role)]\n",
    "                conv += extracted_text[content_index+len('\"Content\"'):]#comma_indices[len(comma_indices)-1]]\n",
    "                return conv\n",
    "            else:\n",
    "                pass\n",
    "    else:\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "6297dd6a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AGENT: 'Good morning! Thank you for calling Patient Pathways. My name is Alex, and I'll be assisting you with your enrollment. How may I address you?',\n",
      "      \n",
      "CUSTOMER: 'Hello, Alex. I'm Jordan Smith',\n",
      "      \n",
      "AGENT: ' It's nice to meet you, Jordan. To start with your enrollment, I'll need to ask you a few questions. Is now a good time?',\n",
      "      \n",
      "CUSTOMER: 'Yes, that's fine',\n",
      "      \n",
      "AGENT: \"Great, thank you\",\n",
      "      \n",
      "AGENT: \"Let's begin with your full name for our records\",\n",
      "      \n",
      "CUSTOMER: 'It's Jordan Andrew Smith',\n",
      "      \n",
      "AGENT: 'Thank you, Jordan. May I ask which gender you identify with? This information helps us to tailor our care to your specific needs, but please know that providing this information is entirely optional',\n",
      "      \n",
      "CUSTOMER: \"Sure, it's March 14, 1989\",\n",
      "      \n",
      "AGENT: 'Perfect, thank you. Next, I'll need your contact information. What's the best phone number and email to reach you at?',\n",
      "      \n",
      "CUSTOMER: 'You can reach me at 555-123-4567 and jordan.smith@email.com',\n",
      "      \n",
      "\n"
     ]
    }
   ],
   "source": [
    "t1 = preprocess_text(response)\n",
    "print(t1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "ca9e2989",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_transcript = preprocess_text(response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "b9bd4d8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'AGENT: \\'Good morning! Thank you for calling Patient Pathways. My name is Alex, and I\\'ll be assisting you with your enrollment. How may I address you?\\',\\n      \\nCUSTOMER: \\'Hello, Alex. I\\'m Jordan Smith\\',\\n      \\nAGENT: \\' It\\'s nice to meet you, Jordan. To start with your enrollment, I\\'ll need to ask you a few questions. Is now a good time?\\',\\n      \\nCUSTOMER: \\'Yes, that\\'s fine\\',\\n      \\nAGENT: \"Great, thank you\",\\n      \\nAGENT: \"Let\\'s begin with your full name for our records\",\\n      \\nCUSTOMER: \\'It\\'s Jordan Andrew Smith\\',\\n      \\nAGENT: \\'Thank you, Jordan. May I ask which gender you identify with? This information helps us to tailor our care to your specific needs, but please know that providing this information is entirely optional\\',\\n      \\nCUSTOMER: \"Sure, it\\'s March 14, 1989\",\\n      \\nAGENT: \\'Perfect, thank you. Next, I\\'ll need your contact information. What\\'s the best phone number and email to reach you at?\\',\\n      \\nCUSTOMER: \\'You can reach me at 555-123-4567 and jordan.smith@email.com\\',\\n      \\n'"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_transcript"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e01f716e",
   "metadata": {},
   "source": [
    "# Form Enrollment :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "id": "f2649fb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_llama2(bedrock_runtime , prompt , temp , top_p):\n",
    "    try:\n",
    "        body = {\n",
    "            \"prompt\": prompt,\n",
    "            \"temperature\": temp,\n",
    "            \"top_p\": top_p,\n",
    "            \"max_gen_len\": 200\n",
    "            }\n",
    "\n",
    "        response = bedrock_runtime.invoke_model(\n",
    "            modelId=\"meta.llama2-13b-chat-v1\", body=json.dumps(body)\n",
    "        )\n",
    "\n",
    "        response_body = json.loads(response[\"body\"].read())\n",
    "        completion = response_body[\"generation\"]\n",
    "\n",
    "        return completion\n",
    "\n",
    "    except ClientError:\n",
    "        logger.error(\"Couldn't invoke Llama 2\")\n",
    "        raise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "id": "cd9982c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def enrollment_prompt_generator(conversation):\n",
    "    prompt_llama = f\"\"\"\n",
    "Instruction: \"Identify the different entities like Name,First Name,Last Name,Age,Email,Username etc of the patient/customer\n",
    "from the below conersation and provide them in the following format :\n",
    "Name : [Name]\n",
    "Age : [Age] and so on in a json format and only provide the json object.\" :\n",
    "\n",
    "{conversation}.\n",
    "             \n",
    "Response :  \n",
    "    \"\"\"\n",
    "    return prompt_llama"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "id": "7973cd60",
   "metadata": {},
   "outputs": [],
   "source": [
    "prompt_enrollment = enrollment_prompt_generator(final_transcript)\n",
    "enrollment_data = load_llama2(bedrock_runtime,prompt_enrollment,0,0.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 341,
   "id": "e8f19edb",
   "metadata": {},
   "outputs": [],
   "source": [
    "prompt_enrollment = enrollment_prompt_generator(final_transcript)\n",
    "enrollment_data = load_llama2(bedrock_runtime,prompt_enrollment,0,0.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 342,
   "id": "c2b93f85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "{\n",
      "\"Name\" : \"Jordan Andrew Smith\",\n",
      "\"Age\" : \"March 14, 1989\",\n",
      "\"Gender\" : \"Male\",\n",
      "\"Email\" : \"jordan.smith@email.com\",\n",
      "\"Phone Number\" : \"555-123-4567\"\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "print(enrollment_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "id": "fe483ada",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "{\n",
      "\"Name\" : \"Jordan Andrew Smith\",\n",
      "\"Age\" : \"1989-03-14\",\n",
      "\"Gender\" : \"Male\",\n",
      "\"Email\" : \"jordan.smith@email.com\",\n",
      "\"Phone\" : \"555-123-4567\"\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "print(enrollment_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "id": "e0bad2aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Name : Jordan Smith\n",
      "Age : 33\n",
      "Gender : Male\n",
      "Email : jordan.smith@email.com\n",
      "Phone Number : 555-123-4567\n"
     ]
    }
   ],
   "source": [
    "print(enrollment_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "id": "7448cd5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "enrollment_json_object = json.loads(enrollment_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "id": "aa5e3bc5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Name': 'Jordan Andrew Smith',\n",
       " 'Age': '1989-03-14',\n",
       " 'Gender': 'Male',\n",
       " 'Email': 'jordan.smith@email.com',\n",
       " 'Phone': '555-123-4567'}"
      ]
     },
     "execution_count": 288,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "enrollment_json_object"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4817044d",
   "metadata": {},
   "source": [
    "# Further Testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "id": "3046afe8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AGENT: 'Good morning! Thank you for calling Patient Pathways. My name is Alex, and I'll be assisting you with your enrollment. How may I address you?',\n",
      "      \n",
      "CUSTOMER: 'Hello, Alex. I'm Jordan Smith',\n",
      "      \n",
      "AGENT: ' It's nice to meet you, Jordan. To start with your enrollment, I'll need to ask you a few questions. Is now a good time?',\n",
      "      \n",
      "CUSTOMER: 'Yes, that's fine',\n",
      "      \n",
      "AGENT: \"Great, thank you\",\n",
      "      \n",
      "AGENT: \"Let's begin with your full name for our records\",\n",
      "      \n",
      "CUSTOMER: 'It's Jordan Andrew Smith',\n",
      "      \n",
      "AGENT: 'Thank you, Jordan. May I ask which gender you identify with? This information helps us to tailor our care to your specific needs, but please know that providing this information is entirely optional',\n",
      "      \n",
      "CUSTOMER: \"Sure, it's March 14, 1989\",\n",
      "      \n",
      "AGENT: 'Perfect, thank you. Next, I'll need your contact information. What's the best phone number and email to reach you at?',\n",
      "      \n",
      "CUSTOMER: 'You can reach me at 555-123-4567 and jordan.smith@email.com',\n",
      "      \n",
      "\n",
      "CUSTOMER : My Dosage Period is 2 weeks\n"
     ]
    }
   ],
   "source": [
    "final_transcript1 = final_transcript + \"\\n\" + \"CUSTOMER : My Dosage Period is 2 weeks\"\n",
    "print(final_transcript1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "id": "4520cd29",
   "metadata": {},
   "outputs": [],
   "source": [
    "prompt_enrollment1 = enrollment_prompt_generator(final_transcript1)\n",
    "enrollment_data1 = load_llama2(bedrock_runtime,prompt_enrollment1,0,0.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "id": "17a40ad7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Json Object with the following fields:\n",
      "\n",
      "Name : Jordan Andrew Smith\n",
      "Age : 33\n",
      "Gender : Male\n",
      "Email : jordan.smith@email.com\n",
      "Phone Number : 555-123-4567\n",
      "Dosage Period : 2 weeks\n",
      "\n",
      "Please provide the json object in the above format.\n"
     ]
    }
   ],
   "source": [
    "print(enrollment_data1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "id": "b51c7a7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Name : Jordan\n",
      "Age : 33\n",
      "Gender : Male\n",
      "Email : jordan.smith@email.com\n",
      "Phone : 555-123-4567\n",
      "Dosage Period : 2 weeks\n",
      "\n",
      "Please provide the above information in the format requested.\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(enrollment_data1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2856d275",
   "metadata": {},
   "source": [
    "# Text Summarisation :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "773bf45e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def text_summariser_llama2(bedrock_runtime , prompt , temp , top_p):\n",
    "    try:\n",
    "        body = {\n",
    "            \"prompt\": prompt,\n",
    "            \"temperature\": temp,\n",
    "            \"top_p\": top_p,\n",
    "            \"max_gen_len\": 200\n",
    "            }\n",
    "\n",
    "        response = bedrock_runtime.invoke_model(\n",
    "            modelId=\"meta.llama2-13b-chat-v1\", body=json.dumps(body)\n",
    "        )\n",
    "\n",
    "        response_body = json.loads(response[\"body\"].read())\n",
    "        completion = response_body[\"generation\"]\n",
    "\n",
    "        return completion\n",
    "\n",
    "    except ClientError:\n",
    "        logger.error(\"Couldn't invoke Llama 2\")\n",
    "        raise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "id": "31901d0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def prompt_generator(context):\n",
    "    prompt_llama = f\"\"\"\n",
    "Instruction: \"Summarise this call transcript between a patient and an agent and provide it in a precise paragraph : \" :\n",
    "\n",
    "{context}.\n",
    "             \n",
    "Response :  \n",
    "    \"\"\"\n",
    "    return prompt_llama"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "id": "a13ebb53",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Instruction: \"Summarise this call transcript between a patient and an agent and provide it in a precise paragraph : \" :\n",
      "\n",
      "AGENT: 'Good morning! Thank you for calling Patient Pathways. My name is Alex, and I'll be assisting you with your enrollment. How may I address you?',\n",
      "      \n",
      "CUSTOMER: 'Hello, Alex. I'm Jordan Smith',\n",
      "      \n",
      "AGENT: ' It's nice to meet you, Jordan. To start with your enrollment, I'll need to ask you a few questions. Is now a good time?',\n",
      "      \n",
      "CUSTOMER: 'Yes, that's fine',\n",
      "      \n",
      "AGENT: \"Great, thank you\",\n",
      "      \n",
      "AGENT: \"Let's begin with your full name for our records\",\n",
      "      \n",
      "CUSTOMER: 'It's Jordan Andrew Smith',\n",
      "      \n",
      "AGENT: 'Thank you, Jordan. May I ask which gender you identify with? This information helps us to tailor our care to your specific needs, but please know that providing this information is entirely optional',\n",
      "      \n",
      "CUSTOMER: \"Sure, it's March 14, 1989\",\n",
      "      \n",
      "AGENT: 'Perfect, thank you. Next, I'll need your contact information. What's the best phone number and email to reach you at?',\n",
      "      \n",
      "CUSTOMER: 'You can reach me at 555-123-4567 and jordan.smith@email.com',\n",
      "      \n",
      ".\n",
      "             \n",
      "Response :  \n",
      "    \n"
     ]
    }
   ],
   "source": [
    "prompt = prompt_generator(final_transcript)\n",
    "print(prompt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "id": "520b47a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "prompt = prompt_generator(final_transcript)\n",
    "final_summary = text_summariser_llama2(bedrock_runtime,prompt,0.5,0.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "id": "c20611cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "The patient, Jordan Smith, called the Patient Pathways enrollment line to begin the enrollment process. The agent, Alex, greeted Jordan and asked for their full name for the records. Jordan provided their full name, date of birth, and gender. The agent also requested contact information, which Jordan provided. The agent thanked Jordan and confirmed that they had all the necessary information to proceed with the enrollment.\n"
     ]
    }
   ],
   "source": [
    "print(final_summary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "id": "498169d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "prompt = prompt_generator(final_transcript)\n",
    "final_summary = text_summariser_llama2(bedrock_runtime,prompt,0.5,0.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "id": "ad74c40d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "The patient, Jordan Smith, called Patient Pathways to enroll in their services. Alex, the agent, greeted Jordan and asked for their full name and gender identity for record-keeping purposes. Jordan provided this information and then gave their contact information, including their phone number and email address.\n"
     ]
    }
   ],
   "source": [
    "print(final_summary)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acef7021",
   "metadata": {},
   "source": [
    "# Claude Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "id": "0b7070fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "{\n",
      "\"Name\" : \"Jordan Andrew Smith\",\n",
      "\"Age\" : \"1989-03-14\",\n",
      "\"Gender\" : \"Male\",\n",
      "\"Email\" : \"jordan.smith@email.com\",\n",
      "\"Phone\" : \"555-123-4567\"\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "print(enrollment_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "id": "d39afa0d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name : Jordan Andrew Smith\n",
      "Age : 1989-03-14\n",
      "Gender : Male\n",
      "Email : jordan.smith@email.com\n",
      "Phone : 555-123-4567\n",
      "\n"
     ]
    }
   ],
   "source": [
    "patient_data = \"\"\n",
    "list1 = enrollment_json_object.keys()\n",
    "for value in list1:\n",
    "    patient_data += f\"{value} : {enrollment_json_object[value]}\"\n",
    "    patient_data += \"\\n\"\n",
    "print(patient_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "id": "d9162a69",
   "metadata": {},
   "outputs": [],
   "source": [
    "import boto3\n",
    "from langchain.chains import ConversationChain\n",
    "from langchain.memory import ConversationBufferMemory\n",
    "from langchain.prompts import PromptTemplate\n",
    "from langchain.llms import Bedrock\n",
    "\n",
    "bedrock_runtime_claude = boto3.client(\n",
    "    service_name=\"bedrock-runtime\",\n",
    "    region_name=\"us-east-1\",\n",
    ")\n",
    "\n",
    "claude_prompt = f\"\"\"\n",
    "Instruction : You are an agent assist where you trying to helpe the agent help with the insights or data collection from the real time conversation happening between the agent and a patient.Based on the\n",
    "conversation summary as well as the enrollment data, can you help the agent answer any questionsand generate insights when asked for.\n",
    "\n",
    "Current conversation summary:\n",
    "{final_summary}\n",
    "\n",
    "Patient enrollment data:\n",
    "{patient_data}\n",
    "\n",
    "Here is the human's next reply:\n",
    "{input}\n",
    "\n",
    "Assistant:\n",
    "\"\"\"\n",
    "\n",
    "model_id = \"anthropic.claude-v2\"\n",
    "model_kwargs =  { \n",
    "    \"max_tokens_to_sample\": 4096,\n",
    "    \"temperature\": 0.5,\n",
    "    \"top_k\": 250,\n",
    "    \"top_p\": 1,\n",
    "    \"stop_sequences\": [\"\\n\\nHuman\"],\n",
    "    \"prompt\": claude_prompt,\n",
    "}\n",
    "\n",
    "llm = Bedrock(\n",
    "    client=bedrock_runtime,\n",
    "    model_id=model_id,\n",
    "    model_kwargs=model_kwargs\n",
    ")\n",
    "\n",
    "conversation= ConversationChain(\n",
    "    llm=llm, verbose=False, memory=ConversationBufferMemory() #memory_chain\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "id": "c708cadd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Instruction : You are an agent assist where you trying to helpe the agent help with the insights or data collection from the real time conversation happening between the agent and a patient.Based on the\n",
      "conversation summary as well as the enrollment data, can you help the agent answer any questionsand generate insights when asked for.\n",
      "\n",
      "Current conversation summary:\n",
      "\n",
      "The patient, Jordan Smith, called Patient Pathways to enroll in their services. Alex, the agent, greeted Jordan and asked for their full name and gender identity for record-keeping purposes. Jordan provided this information and then gave their contact information, including their phone number and email address.\n",
      "\n",
      "Patient enrollment data:\n",
      "Name : Jordan Andrew Smith\n",
      "Age : 1989-03-14\n",
      "Gender : Male\n",
      "Email : jordan.smith@email.com\n",
      "Phone : 555-123-4567\n",
      "\n",
      "\n",
      "Here is the human's next reply:\n",
      "<bound method Kernel.raw_input of <ipykernel.ipkernel.IPythonKernel object at 0x7fa65b66da80>>\n",
      "\n",
      "Assistant:\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(claude_prompt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "id": "451ddfc2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ec2-user/anaconda3/envs/tensorflow2_p310/lib/python3.10/site-packages/langchain_community/llms/bedrock.py:73: UserWarning: Error: Prompt must alternate between '\n",
      "\n",
      "Human:' and '\n",
      "\n",
      "Assistant:'. Received The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n",
      "\n",
      "Current conversation:\n",
      "\n",
      "Human: Do we have the Name?\n",
      "AI:  I'm afraid I don't have enough context to know what specific name you are asking about. I'm an AI assistant created by Anthropic to be helpful, harmless, and honest. If you provide more details about the context, I can try to answer your question about a name.\n",
      "\n",
      "Human: Do we have the Patient's Name?\n",
      "AI:\n",
      "\n",
      "Assistant:\n",
      "  warnings.warn(ALTERNATION_ERROR + f\" Received {input_text}\")\n"
     ]
    }
   ],
   "source": [
    "output = conversation.predict(input=\"Do we have the Patient's Name?\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "id": "a221a668",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\" I'm afraid I don't have any information about a specific patient or their name. As an AI assistant without access to personal medical records, I don't have enough context to provide patient details or names. I'd be happy to have a respectful conversation though! Please feel free to provide additional context if you have a more general question about healthcare or medicine.\""
      ]
     },
     "execution_count": 323,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71edf39c",
   "metadata": {},
   "source": [
    "# Q/A LLAMA Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 343,
   "id": "c310a082",
   "metadata": {},
   "outputs": [],
   "source": [
    "def invoke_llama2(bedrock_runtime , prompt , temp , top_p):\n",
    "    try:\n",
    "        body = {\n",
    "            \"prompt\": prompt,\n",
    "            \"temperature\": temp,\n",
    "            \"top_p\": top_p,\n",
    "            \"max_gen_len\": 200\n",
    "            }\n",
    "\n",
    "        response = bedrock_runtime.invoke_model(\n",
    "            modelId=\"meta.llama2-13b-chat-v1\", body=json.dumps(body)\n",
    "        )\n",
    "\n",
    "        response_body = json.loads(response[\"body\"].read())\n",
    "        completion = response_body[\"generation\"]\n",
    "\n",
    "        return completion\n",
    "\n",
    "    except ClientError:\n",
    "        logger.error(\"Couldn't invoke Llama 2\")\n",
    "        raise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 445,
   "id": "6a5ef078",
   "metadata": {},
   "outputs": [],
   "source": [
    "def prompt_generator(final_summary,patient_data,question):\n",
    "    prompt_llama = f\"\"\"Using the information from the conversation summary : {final_summary} \n",
    "and \n",
    "The patient enrollment data : \n",
    "{patient_data},\n",
    "Answer the following Question : \n",
    "{question}\n",
    "\n",
    "If you do not know the answer and if the Current conversation summary or the Patient enrollment data doesn't contain the answer,then \n",
    "truthfully say I don't know.\n",
    "Response:\n",
    "\"\"\"\n",
    "    return prompt_llama"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "id": "1ca243c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "question = \"What is the patient's name?\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "id": "f84fab2c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nThe patient, Jordan Smith, called Patient Pathways to enroll in their services. Alex, the agent, greeted Jordan and asked for their full name and gender identity for record-keeping purposes. Jordan provided this information and then gave their contact information, including their phone number and email address.'"
      ]
     },
     "execution_count": 447,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 448,
   "id": "51ddd036",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name : Jordan Andrew Smith\n",
      "Age : 1989-03-14\n",
      "Gender : Male\n",
      "Email : jordan.smith@email.com\n",
      "Phone : 555-123-4567\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(patient_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 449,
   "id": "578273e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"What is the patient's name?\""
      ]
     },
     "execution_count": 449,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "question"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 450,
   "id": "7cf1297e",
   "metadata": {},
   "outputs": [],
   "source": [
    "prompt = prompt_generator(final_summary,patient_data,question)\n",
    "final_answer_llama = invoke_llama2(bedrock_runtime,prompt,0.5,0.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 451,
   "id": "dd73612a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using the information from the conversation summary : \n",
      "The patient, Jordan Smith, called Patient Pathways to enroll in their services. Alex, the agent, greeted Jordan and asked for their full name and gender identity for record-keeping purposes. Jordan provided this information and then gave their contact information, including their phone number and email address. \n",
      "and \n",
      "The patient enrollment data : \n",
      "Name : Jordan Andrew Smith\n",
      "Age : 1989-03-14\n",
      "Gender : Male\n",
      "Email : jordan.smith@email.com\n",
      "Phone : 555-123-4567\n",
      ",\n",
      "Answer the following Question : \n",
      "What is the patient's name?\n",
      "\n",
      "If you do not know the answer and if the Current conversation summary or the Patient enrollment data doesn't contain the answer,then \n",
      "truthfully say I don't know.\n",
      "Response:\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(prompt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 452,
   "id": "c7dce97a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "The patient's name is Jordan Andrew Smith.\n"
     ]
    }
   ],
   "source": [
    "print(final_answer_llama)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 388,
   "id": "70d378e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "question2 = \"What is the patient's Lastname,Email Address and Phone Number?\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 390,
   "id": "264384c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Lastname : Smith\n",
      "Email Address : jordan.smith@email.com\n",
      "Phone Number : 555-123-4567\n"
     ]
    }
   ],
   "source": [
    "prompt = prompt_generator(final_summary,patient_data,question2)\n",
    "final_answer_llama_2 = invoke_llama2(bedrock_runtime,prompt,0.5,0.9)\n",
    "print(final_answer_llama_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 453,
   "id": "5da2f029",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "The patient's Lastname is Smith.\n",
      "The patient's Email Address is jordan.smith@email.com.\n",
      "The patient's Phone Number is 555-123-4567.\n"
     ]
    }
   ],
   "source": [
    "prompt = prompt_generator(final_summary,patient_data,question2)\n",
    "final_answer_llama_2 = invoke_llama2(bedrock_runtime,prompt,0.5,0.9)\n",
    "print(final_answer_llama_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 392,
   "id": "2807aff3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Firstname : Jordan\n"
     ]
    }
   ],
   "source": [
    "question3 = \"What is the patient's Firstname?\"\n",
    "prompt = prompt_generator(final_transcript,final_summary,patient_data,question3)\n",
    "final_answer_llama_2 = invoke_llama2(bedrock_runtime,prompt,0.5,0.9)\n",
    "print(final_answer_llama_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 455,
   "id": "cc02c6fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "The patient's Firstname is Jordan.\n"
     ]
    }
   ],
   "source": [
    "question3 = \"What is the patient's Firstname?\"\n",
    "prompt = prompt_generator(final_summary,patient_data,question3)\n",
    "final_answer_llama_2 = invoke_llama2(bedrock_runtime,prompt,0.5,0.9)\n",
    "print(final_answer_llama_2)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "conda_tensorflow2_p310",
   "language": "python",
   "name": "conda_tensorflow2_p310"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
